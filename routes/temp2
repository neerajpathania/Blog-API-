const express = require('express');
const axios = require('axios');
const qs = require('querystring');
const app = express();

const CLIENT_ID = 'your_google_client_id';
const CLIENT_SECRET = 'your_google_client_secret';
const REDIRECT_URI = 'http://localhost:3000/callback'; // Your React frontend URL for Google callback
const GOOGLE_OAUTH_URL = 'https://accounts.google.com/o/oauth2/v2/auth';
const GOOGLE_TOKEN_URL = 'https://oauth2.googleapis.com/token';
const GOOGLE_USERINFO_URL = 'https://www.googleapis.com/oauth2/v2/userinfo';

// Step 1: Redirect to Google OAuth
app.get('/auth/google', (req, res) => {
    const oauthUrl = `${GOOGLE_OAUTH_URL}?response_type=code&client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&scope=openid%20email%20profile&access_type=offline&prompt=consent`;
    res.redirect(oauthUrl);
});

// Step 2: Handle callback from Google
app.get('/callback', async (req, res) => {
    const code = req.query.code;

    // Exchange authorization code for access token
    const tokenResponse = await axios.post(GOOGLE_TOKEN_URL, qs.stringify({
        code,
        client_id: CLIENT_ID,
        client_secret: CLIENT_SECRET,
        redirect_uri: REDIRECT_URI,
        grant_type: 'authorization_code'
    }), {
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
        }
    });

    const { access_token, id_token } = tokenResponse.data;

    // Step 3: Fetch user information using the access token
    const userInfoResponse = await axios.get(GOOGLE_USERINFO_URL, {
        headers: {
            Authorization: `Bearer ${access_token}`
        }
    });

    // You can now send this user data to the frontend or save it in your database
    res.json(userInfoResponse.data);
});

// Start server
app.listen(5000, () => {
    console.log('Server started on http://localhost:5000');
});
